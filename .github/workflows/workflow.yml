name: Python 3.9, Ruby 2.7, Java 15, .NET 5, allure

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    # strategy:
    #   matrix:
    #     # ruby-version: ['2.6', '2.7', '3.0']
    #     ruby-version: ['2.7']
    #     # node-version: [10.x, 12.x, 14.x, 15.x]
    #     node-version: [15.x]

    steps:
    - uses: actions/checkout@v2

  python:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/allure-prep
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        flake8 .
    - name: Test with pytest
      if: always()
      run: |
        pwd
        pytest --alluredir=allure-results
#     - name: Analysing the code with pylint
#       run: |
#         pylint `ls -R|grep .py$|xargs`

    - name: Look at Allure
      if: always()
      uses: ./.github/actions/allure-show

    # TODO: de-duplicate
    - name: Archive Allure results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: allure-results
        path: allure-results
    # - name: Archive Allure reports
    #   if: always()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: allure-reports
    #     path: allure-reports

  ruby:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        # ruby-version: ['2.6', '2.7', '3.0']
        ruby-version: ['2.7']
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/allure-prep

    - name: Experimental installation
      if: always()
      run: |
        rm Gemfile.lock
        # bundle install

    - name: Set up Ruby
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
      if: always()
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    # - name: Experimental installation
    #   if: always()
    #   run: |
    #     rm Gemfile.lock
    #     bundle install

    - name: Run tests
      if: always()
      run: bundle exec rake

    - name: Look at Allure
      if: always()
      uses: ./.github/actions/allure-show

    # TODO: de-duplicate
    - name: Archive Allure results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: allure-results
        path: allure-results
    # - name: Archive Allure reports
    #   if: always()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: allure-reports
    #     path: allure-reports

  node:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        # node-version: [10.x, 12.x, 14.x, 15.x]
        node-version: [15.x]
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/allure-prep
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      if: always()
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

    - name: Look at Allure
      if: always()
      uses: ./.github/actions/allure-show

    # TODO: de-duplicate
    - name: Archive Allure results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: allure-results
        path: allure-results
    # - name: Archive Allure reports
    #   if: always()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: allure-reports
    #     path: allure-reports

  golang:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/allure-prep
    - name: Set up Go
      uses: actions/setup-go@v2
      if: always()
      with:
        go-version: 1.16

    - name: Build
      if: always()
      run: |
        go get github.com/onsi/ginkgo/ginkgo
        go get github.com/onsi/gomega/...
        go get -u github.com/dailymotion/allure-go
        export ALLURE_RESULTS_PATH=allure-results
        GCO_ENABLED=0
        go mod vendor
        go build -v ./...

    - name: Test
      if: always()
      run: go test -v ./...

    - name: Look at Allure
      if: always()
      uses: ./.github/actions/allure-show

    # TODO: de-duplicate
    - name: Archive Allure results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: allure-results
        path: allure-results
    # - name: Archive Allure reports
    #   if: always()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: allure-reports
    #     path: allure-reports

  jdk:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/allure-prep
    - name: Set up JDK 15
      uses: actions/setup-java@v2
      if: always()
      with:
        java-version: '15'
        distribution: 'adopt'
    - name: Run check style
      uses: nikitasavinov/checkstyle-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        reporter: 'github-pr-check'
        tool_name: 'testtool'
    - name: Gradle wrapper
      if: always()
      run: gradle wrapper
    - name: Print Gradle version
      if: always()
      run: gradle --version
    - name: Grant execute permission for gradlew
      if: always()
      run: chmod +x gradlew
    - name: Build with Gradle
      if: always()
      run: ./gradlew build

    - name: Look at Allure
      if: always()
      uses: ./.github/actions/allure-show

    # TODO: de-duplicate
    - name: Archive Allure results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: allure-results
        path: allure-results
    # - name: Archive Allure reports
    #   if: always()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: allure-reports
    #     path: allure-reports

  dotnet-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Add dotnet-format problem matcher
        uses: xt0rted/dotnet-format-problem-matcher@v1

      - name: Restore dotnet tools
        uses: xt0rted/dotnet-tool-restore@v1

      - name: Run dotnet format
        uses: xt0rted/dotnet-format@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
  dotnet:
    runs-on: ubuntu-latest
    needs:
      - build
      # - dotnet-format
    steps:
    - uses: actions/checkout@v2
    - uses: ./.github/actions/allure-prep
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      if: always()
      with:
        dotnet-version: 5.0.x
    - name: Print donten version
      if: always()
      run: dotnet --version
    - name: Restore dependencies
      if: always()
      run: dotnet restore
    # - name: dotnet - format check
    #   if: always()
    #   run: |
    #     run: dotnet tool update -g dotnet-format
    #     dotnet-format --check
    - name: Build
      if: always()
      run: dotnet build --no-restore
    - name: Test
      if: always()
      run: dotnet test --no-build --verbosity normal

    - name: Look at Allure
      if: always()
      uses: ./.github/actions/allure-show

    # TODO: de-duplicate
    - name: Archive Allure results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: allure-results
        path: allure-results
    # - name: Archive Allure reports
    #   if: always()
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: allure-reports
    #     path: allure-reports

  swift:
    runs-on: macos-latest
    needs: build

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v

  allure:
    runs-on: ubuntu-latest
    if: always()
    needs:
      # - build
      - python
      - ruby
      - node
      - golang
      - jdk
      - dotnet
      - swift
    steps:

    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2

    - name: Look at Allure
      if: always()
      uses: ./.github/actions/allure-show

    - name: Get Allure history
      uses: actions/checkout@v2
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

    - name: Allure Report with history
      uses: simple-elf/allure-report-action@v1.5

    - name: Allure Report action from marketplace
      uses: simple-elf/allure-report-action@master
      if: always()
      #id: allure-report
      with:
        allure_results: allure-results
        gh_pages: gh-pages
        allure_report: allure-report
        allure_history: allure-history
        keep_reports: 50

    - name: Deploy report to Github Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: allure-history
  # dotnet-format:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2

  #     - name: Add dotnet-format problem matcher
  #       uses: xt0rted/dotnet-format-problem-matcher@v1

  #     - name: Restore dotnet tools
  #       uses: xt0rted/dotnet-tool-restore@v1

  #     - name: Run dotnet format
  #       uses: xt0rted/dotnet-format@v1
  #       with:
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
