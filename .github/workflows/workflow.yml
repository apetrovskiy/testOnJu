name: Python 3.9, Ruby 2.7, Java 15, .NET 5, allure

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        # ruby-version: ['2.6', '2.7', '3.0']
        ruby-version: ['2.7']
        # node-version: [10.x, 12.x, 14.x, 15.x]
        node-version: [15.x]

    steps:
    - uses: actions/checkout@v2

    - name: Prepare Allure
      run: |
        sudo apt-get install allure
        mkdir allure-results
        mkdir allure-report
        mkdir allure-history

    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9

    # - name: Look at allure
    #   run: |
    #     ls allure-results
    #     # allure --version

    - name: Python - install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Python - lint with flake8
      run: |
        flake8 .
    - name: Python - test with pytest
      if: always()
      run: |
        pytest --alluredir=allure-results
#     - name: Analysing the code with pylint
#       run: |
#         pylint `ls -R|grep .py$|xargs`

    - name: Experimental installation
      if: always()
      run: |
        rm Gemfile.lock
        # bundle install

    - name: Set up Ruby
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
      if: always()
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    # - name: Experimental installation
    #   if: always()
    #   run: |
    #     rm Gemfile.lock
    #     bundle install

    - name: Ruby - run tests
      if: always()
      run: bundle exec rake

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      if: always()
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

    - name: Set up Go
      uses: actions/setup-go@v2
      if: always()
      with:
        go-version: 1.16

    - name: Go - build
      if: always()
      run: |
        go get github.com/onsi/ginkgo/ginkgo
        go get github.com/onsi/gomega/...
        go get -u github.com/dailymotion/allure-go
        export ALLURE_RESULTS_PATH=allure-results
        GCO_ENABLED=0
        go mod vendor
        go build -v ./...

    - name: Go - test
      if: always()
      run: go test -v ./...

    - name: Set up JDK 15
      uses: actions/setup-java@v2
      if: always()
      with:
        java-version: '15'
        distribution: 'adopt'
    - name: JDK - Gradle wrapper
      if: always()
      run: gradle wrapper
    - name: JDK - Gradle version
      if: always()
      run: gradle --version
    - name: JDK - Grant execute permission for gradlew
      if: always()
      run: chmod +x gradlew
    - name: JDK - build with Gradle
      if: always()
      run: ./gradlew build

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      if: always()
      with:
        dotnet-version: 5.0.x
    - name: dotnet - version
      if: always()
      run: dotnet --version
    - name: dotnet - restore dependencies
      if: always()
      run: dotnet restore
    - name: dotnet - build
      if: always()
      run: dotnet build --no-restore
    - name: dotnet - test
      if: always()
      run: dotnet test --no-build --verbosity normal

    - name: Get Allure history
      uses: actions/checkout@v2
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

    - name: Allure Report with history
      uses: simple-elf/allure-report-action@v1.5

    - name: Allure Report action from marketplace
      uses: simple-elf/allure-report-action@master
      if: always()
      #id: allure-report
      with:
        allure_results: allure-results
        gh_pages: gh-pages
        allure_report: allure-report
        allure_history: allure-history
        keep_reports: 50

    - name: Deploy report to Github Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: allure-history
